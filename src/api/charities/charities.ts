/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * dog
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Charity,
  PostCharitiesBody,
  PutCharitiesBody
} from '.././model'



/**
 * Get all charities
 */
export const getCharities = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Charity[]>> => {
    
    return axios.default.get(
      `/charities`,options
    );
  }


export const getGetCharitiesQueryKey = () => {
    return [`/charities`] as const;
    }

    
export const getGetCharitiesQueryOptions = <TData = Awaited<ReturnType<typeof getCharities>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCharities>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCharitiesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCharities>>> = ({ signal }) => getCharities({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCharities>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCharitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getCharities>>>
export type GetCharitiesQueryError = AxiosError<unknown>

export const useGetCharities = <TData = Awaited<ReturnType<typeof getCharities>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCharities>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCharitiesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a charity
 */
export const postCharities = (
    postCharitiesBody: PostCharitiesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Charity>> => {
    
    return axios.default.post(
      `/charities`,
      postCharitiesBody,options
    );
  }



export const getPostCharitiesMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCharities>>, TError,{data: PostCharitiesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postCharities>>, TError,{data: PostCharitiesBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCharities>>, {data: PostCharitiesBody}> = (props) => {
          const {data} = props ?? {};

          return  postCharities(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCharitiesMutationResult = NonNullable<Awaited<ReturnType<typeof postCharities>>>
    export type PostCharitiesMutationBody = PostCharitiesBody
    export type PostCharitiesMutationError = AxiosError<unknown>

    export const usePostCharities = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCharities>>, TError,{data: PostCharitiesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postCharities>>,
        TError,
        {data: PostCharitiesBody},
        TContext
      > => {

      const mutationOptions = getPostCharitiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Update a charity
 */
export const putCharities = (
    putCharitiesBody: PutCharitiesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Charity>> => {
    
    return axios.default.put(
      `/charities`,
      putCharitiesBody,options
    );
  }



export const getPutCharitiesMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCharities>>, TError,{data: PutCharitiesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putCharities>>, TError,{data: PutCharitiesBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCharities>>, {data: PutCharitiesBody}> = (props) => {
          const {data} = props ?? {};

          return  putCharities(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCharitiesMutationResult = NonNullable<Awaited<ReturnType<typeof putCharities>>>
    export type PutCharitiesMutationBody = PutCharitiesBody
    export type PutCharitiesMutationError = AxiosError<unknown>

    export const usePutCharities = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCharities>>, TError,{data: PutCharitiesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putCharities>>,
        TError,
        {data: PutCharitiesBody},
        TContext
      > => {

      const mutationOptions = getPutCharitiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a charity
 */
export const deleteCharities = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `/charities`,options
    );
  }



export const getDeleteCharitiesMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCharities>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCharities>>, TError,void, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCharities>>, void> = () => {
          

          return  deleteCharities(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCharitiesMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCharities>>>
    
    export type DeleteCharitiesMutationError = AxiosError<unknown>

    export const useDeleteCharities = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCharities>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCharities>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteCharitiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    