/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * dog
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  Charity,
  PostCharitiesBody,
  PostCharitiesIdCodesCode201,
  PutCharitiesIdBody
} from '.././model'



/**
 * Get all charities
 */
export const getCharities = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Charity[]>> => {
    
    return axios.default.get(
      `/charities`,options
    );
  }


export const getGetCharitiesQueryKey = () => {
    return [`/charities`] as const;
    }

    
export const getGetCharitiesQueryOptions = <TData = Awaited<ReturnType<typeof getCharities>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCharities>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCharitiesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCharities>>> = ({ signal }) => getCharities({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCharities>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCharitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getCharities>>>
export type GetCharitiesQueryError = AxiosError<unknown>

export const useGetCharities = <TData = Awaited<ReturnType<typeof getCharities>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCharities>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCharitiesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a charity
 */
export const postCharities = (
    postCharitiesBody: PostCharitiesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Charity>> => {
    
    return axios.default.post(
      `/charities`,
      postCharitiesBody,options
    );
  }



export const getPostCharitiesMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCharities>>, TError,{data: PostCharitiesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postCharities>>, TError,{data: PostCharitiesBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCharities>>, {data: PostCharitiesBody}> = (props) => {
          const {data} = props ?? {};

          return  postCharities(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCharitiesMutationResult = NonNullable<Awaited<ReturnType<typeof postCharities>>>
    export type PostCharitiesMutationBody = PostCharitiesBody
    export type PostCharitiesMutationError = AxiosError<unknown>

    export const usePostCharities = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCharities>>, TError,{data: PostCharitiesBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postCharities>>,
        TError,
        {data: PostCharitiesBody},
        TContext
      > => {

      const mutationOptions = getPostCharitiesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Update a charity
 */
export const putCharitiesId = (
    id: number,
    putCharitiesIdBody: PutCharitiesIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Charity>> => {
    
    return axios.default.put(
      `/charities/${id}`,
      putCharitiesIdBody,options
    );
  }



export const getPutCharitiesIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCharitiesId>>, TError,{id: number;data: PutCharitiesIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putCharitiesId>>, TError,{id: number;data: PutCharitiesIdBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCharitiesId>>, {id: number;data: PutCharitiesIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putCharitiesId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCharitiesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCharitiesId>>>
    export type PutCharitiesIdMutationBody = PutCharitiesIdBody
    export type PutCharitiesIdMutationError = AxiosError<unknown>

    export const usePutCharitiesId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCharitiesId>>, TError,{id: number;data: PutCharitiesIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putCharitiesId>>,
        TError,
        {id: number;data: PutCharitiesIdBody},
        TContext
      > => {

      const mutationOptions = getPutCharitiesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a charity
 */
export const deleteCharitiesId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `/charities/${id}`,options
    );
  }



export const getDeleteCharitiesIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCharitiesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCharitiesId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCharitiesId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteCharitiesId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCharitiesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCharitiesId>>>
    
    export type DeleteCharitiesIdMutationError = AxiosError<unknown>

    export const useDeleteCharitiesId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCharitiesId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCharitiesId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteCharitiesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Add a code to a charity
 */
export const postCharitiesIdCodesCode = (
    id: number,
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostCharitiesIdCodesCode201>> => {
    
    return axios.default.post(
      `/charities/${id}/codes/${code}`,undefined,options
    );
  }



export const getPostCharitiesIdCodesCodeMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCharitiesIdCodesCode>>, TError,{id: number;code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postCharitiesIdCodesCode>>, TError,{id: number;code: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCharitiesIdCodesCode>>, {id: number;code: string}> = (props) => {
          const {id,code} = props ?? {};

          return  postCharitiesIdCodesCode(id,code,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCharitiesIdCodesCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postCharitiesIdCodesCode>>>
    
    export type PostCharitiesIdCodesCodeMutationError = AxiosError<unknown>

    export const usePostCharitiesIdCodesCode = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCharitiesIdCodesCode>>, TError,{id: number;code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postCharitiesIdCodesCode>>,
        TError,
        {id: number;code: string},
        TContext
      > => {

      const mutationOptions = getPostCharitiesIdCodesCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a code from a charity
 */
export const deleteCharitiesIdCodesCode = (
    id: number,
    code: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `/charities/${id}/codes/${code}`,options
    );
  }



export const getDeleteCharitiesIdCodesCodeMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCharitiesIdCodesCode>>, TError,{id: number;code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCharitiesIdCodesCode>>, TError,{id: number;code: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCharitiesIdCodesCode>>, {id: number;code: string}> = (props) => {
          const {id,code} = props ?? {};

          return  deleteCharitiesIdCodesCode(id,code,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCharitiesIdCodesCodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCharitiesIdCodesCode>>>
    
    export type DeleteCharitiesIdCodesCodeMutationError = AxiosError<unknown>

    export const useDeleteCharitiesIdCodesCode = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCharitiesIdCodesCode>>, TError,{id: number;code: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCharitiesIdCodesCode>>,
        TError,
        {id: number;code: string},
        TContext
      > => {

      const mutationOptions = getDeleteCharitiesIdCodesCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    