/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * dog
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CreateDogBody,
  Dog,
  UpdateDogBody
} from '.././model'



/**
 * Get all dogs
 */
export const getDogs = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Dog[]>> => {
    
    return axios.default.get(
      `/dogs`,options
    );
  }


export const getGetDogsQueryKey = () => {
    return [`/dogs`] as const;
    }

    
export const getGetDogsQueryOptions = <TData = Awaited<ReturnType<typeof getDogs>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDogs>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDogsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDogs>>> = ({ signal }) => getDogs({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDogs>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDogsQueryResult = NonNullable<Awaited<ReturnType<typeof getDogs>>>
export type GetDogsQueryError = AxiosError<unknown>

export const useGetDogs = <TData = Awaited<ReturnType<typeof getDogs>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDogs>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDogsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a dog
 */
export const postDogs = (
    createDogBody: CreateDogBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Dog>> => {
    
    return axios.default.post(
      `/dogs`,
      createDogBody,options
    );
  }



export const getPostDogsMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDogs>>, TError,{data: CreateDogBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postDogs>>, TError,{data: CreateDogBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDogs>>, {data: CreateDogBody}> = (props) => {
          const {data} = props ?? {};

          return  postDogs(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostDogsMutationResult = NonNullable<Awaited<ReturnType<typeof postDogs>>>
    export type PostDogsMutationBody = CreateDogBody
    export type PostDogsMutationError = AxiosError<unknown>

    export const usePostDogs = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDogs>>, TError,{data: CreateDogBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postDogs>>,
        TError,
        {data: CreateDogBody},
        TContext
      > => {

      const mutationOptions = getPostDogsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get a dog
 */
export const getDogsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Dog>> => {
    
    return axios.default.get(
      `/dogs/${id}`,options
    );
  }


export const getGetDogsIdQueryKey = (id: number,) => {
    return [`/dogs/${id}`] as const;
    }

    
export const getGetDogsIdQueryOptions = <TData = Awaited<ReturnType<typeof getDogsId>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDogsId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDogsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDogsId>>> = ({ signal }) => getDogsId(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDogsId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDogsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDogsId>>>
export type GetDogsIdQueryError = AxiosError<unknown>

export const useGetDogsId = <TData = Awaited<ReturnType<typeof getDogsId>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDogsId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDogsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a dog
 */
export const putDogsId = (
    id: number,
    updateDogBody: UpdateDogBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Dog>> => {
    
    return axios.default.put(
      `/dogs/${id}`,
      updateDogBody,options
    );
  }



export const getPutDogsIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDogsId>>, TError,{id: number;data: UpdateDogBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putDogsId>>, TError,{id: number;data: UpdateDogBody}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDogsId>>, {id: number;data: UpdateDogBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putDogsId(id,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutDogsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDogsId>>>
    export type PutDogsIdMutationBody = UpdateDogBody
    export type PutDogsIdMutationError = AxiosError<unknown>

    export const usePutDogsId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDogsId>>, TError,{id: number;data: UpdateDogBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putDogsId>>,
        TError,
        {id: number;data: UpdateDogBody},
        TContext
      > => {

      const mutationOptions = getPutDogsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Delete a dog
 */
export const deleteDogsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `/dogs/${id}`,options
    );
  }



export const getDeleteDogsIdMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDogsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDogsId>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDogsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteDogsId(id,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteDogsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDogsId>>>
    
    export type DeleteDogsIdMutationError = AxiosError<unknown>

    export const useDeleteDogsId = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDogsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteDogsId>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getDeleteDogsIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Get all dogs for a charity
 */
export const getCharitiesIdDogs = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Dog[]>> => {
    
    return axios.default.get(
      `/charities/${id}/dogs`,options
    );
  }


export const getGetCharitiesIdDogsQueryKey = (id: number,) => {
    return [`/charities/${id}/dogs`] as const;
    }

    
export const getGetCharitiesIdDogsQueryOptions = <TData = Awaited<ReturnType<typeof getCharitiesIdDogs>>, TError = AxiosError<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCharitiesIdDogs>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCharitiesIdDogsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCharitiesIdDogs>>> = ({ signal }) => getCharitiesIdDogs(id, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCharitiesIdDogs>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCharitiesIdDogsQueryResult = NonNullable<Awaited<ReturnType<typeof getCharitiesIdDogs>>>
export type GetCharitiesIdDogsQueryError = AxiosError<unknown>

export const useGetCharitiesIdDogs = <TData = Awaited<ReturnType<typeof getCharitiesIdDogs>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCharitiesIdDogs>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetCharitiesIdDogsQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



